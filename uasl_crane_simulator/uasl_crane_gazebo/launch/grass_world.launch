<?xml version="1.0" ?>
<launch>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>

  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/><!--true-->
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find flight_space_mapping)/worlds/grass_houses_graywall.world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find uasl_crane_description)/urdf/testbot.urdf.xacro'" />
   
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <param name="resolution" value="0.1" />
    <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
    <param name="frame_id" type="string" value="world" />
    <!-- maximum range to integrate (speedup!) -->
    <param name="sensor_model/max_range" value="-1" />
    <param name="pointcloud_min_z" value="0" />
    <!-- data source to integrate (PointCloud2) -->
    <remap from="cloud_in" to="velodyne_points" />
  </node>

  <include file="$(find flight_space_mapping)/launch/abstract_map.launch" />
  <node pkg="flight_space_mapping" type="ugv_objects_map" name="ugv_objects_map" /> <!--ugv_obj... is cpp node-->

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model testbot -param robot_description"/>

  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" />
  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher" />
  <node name="visualizer" pkg="rviz" type="rviz"/>

</launch>
